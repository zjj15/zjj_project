GIT：
0.遇到的问题及解决方案：
0.【同一台电脑上个人的github账户如何与公司的gitlab账户共存】
https://www.cnblogs.com/hezhi/p/10317642.html(亲测好用)
config文件实例：zjj_project\ssh 文件
0.1【（诊断）为GitHub添加SSH key时出现“Could not open a connection to your authentication agent”错误的应对方案】
https://www.cnblogs.com/Security-Darren/p/4106328.html
0.2【git-ssh 配置和使用：https://www.cnblogs.com/ldq2016/p/7418206.html】
0.3【解决Windows下使用github需要每次都要ssh-add的问题】
https://blog.csdn.net/EsonJohn/article/details/79134665?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link
https://blog.csdn.net/xianhenyuan/article/details/92397894

git存储密码
https://www.cnblogs.com/Black-Hawk/p/13508318.html


1.【了解Git】
1.0Git、Github、Gitlab与Gitee之间的关系
Git     是一种版本控制系统，是一个命令，是一种工具，有点像cmd(命令行工具)。
Github  是一个基于git实现在线代码托管的仓库，向互联网开放，企业版要收钱。
Gitlab  类似 github，一般用于在企业内搭建git私服，要自己搭环境。
Gitee   即码云，是 oschina 免费给企业用的，不用自己搭建环境，可以建立自己的私有仓库。
Git-ce  是社区版，gitlab-ee是企业版，收费的。

1.1Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。
这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：
/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。
~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。
（当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。
在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings\$USER。
此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。）

1.2git工作流程
流程见上一级目录下的[Git工作流程.pptx文档]

2.【Git配置】
2.0新建Github仓库
*几个需要关注的文件：
@1 README.md（This is where you can write a long description for your project）
@2 .gitignore（Choose which files not to track from a list of templates）

2.1配置个人的用户名称和电子邮件地址：
$ git config --global user.name "zhangjingjing"
$ git config --global user.email 2580043710@qq.com
如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。
如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。

2.2要检查已有的配置信息，可以使用 git config --list 命令
直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样
$ git config user.name
zhangjingjing

2.3生成ssh key
ssh-keygen -t rsa -C "2580043710@qq.com"
注：使用如下命令，可以在指定位置（~/.ssh/）生成指定名字（github_rsa）的ssh key文件github_rsa和github_rsa.pub
ssh-keygen -t rsa -C "你的github邮箱" -f ~/.ssh/github_rsa

2.4ssh配置
在github网站的setting-》ssh key里添加github_rsa.pub的内容

2.5查看ssh key是否已成功配好，如果成功会提示：successful but..
ssh -T git@github.com

3.【Git基本命令】
3.1创建仓库git init
Git 使用 git init 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 git init 是使用 Git 的第一个命令。
在执行完成 git init 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。

3.2拉取代码git clone
我们使用 git clone 从现有 Git 仓库中拷贝项目（类似 svn checkout）。
克隆仓库的命令格式为：git clone <repo>
如果我们需要克隆到指定的目录，可以使用以下命令格式：git clone <repo> <directory>
参数说明：
repo:Git 仓库。
directory:本地目录。

3.3更新、添加、提交、推送完整命令：
git pull->git add 文件名->git commit "提交说明"->git push origin 分支名：分支名
注：在 Linux 系统中，commit 信息使用单引号 '，Windows 系统，commit 信息使用双引号 "。
所以在 git bash 中 git commit -m '提交说明' 这样是可以的，在 Windows 命令行中就要使用双引号 git commit -m "提交说明"。

3.3.1提交与修改
命令		说明
git add		添加文件到仓库
git status	查看仓库当前的状态，显示有变更的文件。
git diff	比较文件的不同，即暂存区和工作区的差异。
git commit	提交暂存区到本地仓库。
git reset	回退版本。
git rm	    删除工作区文件。
git mv		移动或重命名工作区文件。

3.3.2提交日志
命令  		说明
git  log	查看历史提交记录
git  blame <file>	以列表形式查看指定文件的历史修改记录

3.3.3远程操作
命令		说明
git remote	远程仓库操作
git fetch	从远程获取代码库
git pull	下载远程代码并合并
git push	上传远程代码并合并
（$ git push origin master:master
=> 在 local repository 中找到名字为 master 的 branch，使用它去更新 remote repository 下名字为 master 的 branch，
如果 remote repository 下不存在名字是 master 的 branch，那么新建一个。）

3.3.4分支
(对 Git 分支 master 和 origin/master 的一些认识:
https://blog.csdn.net/zzwpublic/article/details/106651578?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.no_search_link&spm=1001.2101.3001.4242)
创建分支：git branch 分支名
切换分支：git checkout 分支名
合并分支：git merge
查看当前本地所有分支：git branch
查看当前所有分支（包括remote）：git branch -a
实例：
$ git branch -a
* main（本地分支）
  remotes/origin/HEAD -> origin/main
  remotes/origin/main（origin的远程仓库里有一个名叫main的分支）
  remotes/origin/master1

查看当前远程分支：git branch -r
创建新分支并立即切换到该分支下：git checkout -b branchname
删除本地分支：git branch -d branchname
删除远程分支： git push origin --delete <BranchName>

3.3.5Git 提交历史一般常用两个命令：
git log  查看历史提交记录。
git log --oneline 选项来查看历史记录的简洁的版本
git blame <file> 以列表形式查看指定文件的历史修改记录。

3.3.6 git tag 查看所有标签
$ git tag
v0.9
v1.0

3.3.7git remote查看当前配置有哪些远程仓库
$ git remote
origin
$ git remote -v （加上 -v 参数，你还可以看到每个别名的实际链接地址）
origin  git@github.com:zjj15/zjj_project.git (fetch)
origin  git@github.com:zjj15/zjj_project.git (push)
#从远程仓库下载新分支与数据：git fetch ，该命令执行完后需要执行 git merge 远程分支到你所在的分支。
#从远端仓库提取数据并尝试合并到当前分支：git merge
（git pull origin master命令相当于git fetch 和 git merge，在实际使用中，git fetch更安全一些因为在merge前，我们可以查看更新情况，然后再决定是否合并）
#git push origin master    # 推送到 Github（推送你的新分支与数据到某个远端仓库命令:git push [alias] [branch]）

# 添加仓库 git remote add 
$ git remote add origin2 git@github.com:tianqixin/runoob-git-test.git
$ git remote -v
origin    git@github.com:tianqixin/runoob-git-test.git (fetch)
origin    git@github.com:tianqixin/runoob-git-test.git (push)
origin2    git@github.com:tianqixin/runoob-git-test.git (fetch)
origin2    git@github.com:tianqixin/runoob-git-test.git (push)

# 删除仓库 git remote rm origin2
$ git remote rm origin2
$ git remote -v
origin    git@github.com:tianqixin/runoob-git-test.git (fetch)
origin    git@github.com:tianqixin/runoob-git-test.git (push)

4.【永久删除文件后找回】：
删除：rm a.txt
查看：git status 
添加到暂存区：git add a.txt
提交：git commit -m "delete a.txt" a.txt

查看所有版本历史记录：git reflog

回退到文件未被删除的版本：git reset --hard 版本号


添加到暂存区的文件删除文件找回：git reset --hard HEAD(当前位置，因为删除的文件还没提交到暂存区)


add1
https://www.jianshu.com/p/59cd1560ebff

