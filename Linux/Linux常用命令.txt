Linux常用命令（只记录最常用得命令）：

命令概述:












具体命令内容：
1.ls 命令
就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。
(1)ls -a 
列出目录所有文件，包含以.开始的隐藏文件
(2)ls -l 
除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来

2.cd 命令
(1)cd /
进入根目录
例：autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ cd /
autost@DESKTOP-IM2UOV2 MINGW64 /
(2)cd ~ 
进入 "home" 目录
例：autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ cd ~
autost@DESKTOP-IM2UOV2 MINGW64 ~
(3)cd -
返回进入此目录之前所在目录
例：autost@DESKTOP-IM2UOV2 MINGW64 ~
$ cd -
/c/Users/autost/Desktop/ZjjGit/zjj_project
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
(4)cd …/ 或者 cd..
返回上一层目录


3.pwd 命令, pwd 命令用于查看当前工作目录路径。

4.mkdir 命令
(1)mkdir -p：
创建一条完整的路径,当路径中的某个目录已经存在时，跳过该目录继续创建下一级目录,
若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。
例：autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ mkdir -p excise_tmp/tmp/t1
(2)mkdir -m：
在创建目录的同时设定权限
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ mkdir -p -m 664 excise_tmp2/tmp/t2

5.rm 命令
删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。

(1)rm -i *.log
删除任何 .log 文件，删除前逐一询问确认：

例：删除a.log,b.log,c.log,d.log
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ ls
a.log  d.log   Mysql/        README.md  每日学习记录.txt  学习路线.jpg
b.log  Git/    postman工具/  Shell/     说明文档.txt      杨幂语录.docx
c.log  Linux/  Python/       Thumbs.db  学习参照表.pptx   张晶晶_简历_New.docx
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ rm -i *.log
rm: remove regular empty file 'a.log'? y
rm: remove regular empty file 'b.log'? y
rm: remove regular empty file 'c.log'? y
rm: remove regular empty file 'd.log'? y
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ ls
Git/    postman工具/  Shell/            说明文档.txt     杨幂语录.docx
Linux/  Python/       Thumbs.db         学习参照表.pptx  张晶晶_简历_New.docx
Mysql/  README.md     每日学习记录.txt  学习路线.jpg

(2)rm -rf test 
删除 test 子目录及子目录中所有档案删除，并且不用一一确认：

例：删除所有e开头的文件夹
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ ls
excise_tmp/   excise_tmp6/  Python/           说明文档.txt
excise_tmp2/  Git/          README.md         学习参照表.pptx
excise_tmp3/  Linux/        Shell/            学习路线.jpg
excise_tmp4/  Mysql/        Thumbs.db         杨幂语录.docx
excise_tmp5/  postman工具/  每日学习记录.txt  张晶晶_简历_New.docx
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ rm -rf e* 命令
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ ls
Git/    postman工具/  Shell/            说明文档.txt     杨幂语录.docx
Linux/  Python/       Thumbs.db         学习参照表.pptx  张晶晶_简历_New.docx
Mysql/  README.md     每日学习记录.txt  学习路线.jpg

(3)rm -- t* 
删除以 - 开头的文件

例：删除t1,t2文件
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ ls
Git/          Python/    t2.txt            学习参照表.pptx
Linux/        README.md  Thumbs.db         学习路线.jpg
Mysql/        Shell/     每日学习记录.txt  杨幂语录.docx
postman工具/  t1.txt     说明文档.txt      张晶晶_简历_New.docx
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ rm -- t*
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ ls
Git/    postman工具/  Shell/            说明文档.txt     杨幂语录.docx
Linux/  Python/       Thumbs.db         学习参照表.pptx  张晶晶_简历_New.docx
Mysql/  README.md     每日学习记录.txt  学习路线.jpg

6.rmdir 删除
注意：不能删除非空目录
当子目录被删除后使它也成为空目录的话，则顺便一并删除：

例：excisetemp文件夹下有1个文件两个文件夹：a.txt  child/  chuild/，
执行rmdir -p excisetemp/child/报错，但是删掉a.txt后excisetemp/child自动被删除
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/excisetemp (main)
$ ls
a.txt  child/  chuild/
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/excisetemp (main)
$ cd ..
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ rmdir -p excisetemp/child/
rmdir: failed to remove directory 'excisetemp': Directory not empty
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ rm excisetemp/a.txt
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/excisetemp (main)
$ ls
chuild/

7.mv 命令
移动文件或修改文件名，根据第二参i 数类型（如目录，则移动文件；如为文件则重命令该文件）。
当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。
(1)将文件 a.txt 重命名为 ab.1txt
mv a.txt ab.1txt

(2)将文件 b.og c.mg d.log ab.1txt 移动到tempss目录中
 mv b.og c.mg d.log ab.1txt  tempss/

(3)将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖（不加参数i，就会直接覆盖）
$ mv -i b.og d.log
mv: overwrite 'd.log'? y

(4)移动当前文件夹下的所有文件到上一级目录
mv * ../

(5)复制上一级目录下的d.log到当前目录下
$ mv ../d.log  .


8.cp 命令（注意和MV命令的区别：mv是剪切，cp是拷贝，拷贝是指不影响原文件，复制一份内容到别处）
将源文件复制至目标文件，或将多个源文件复制至目标目录。
注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！
(1)拷贝上级目录下的tempmp文件中的mp.mk文件到当前目录下（当前目录也有一个同名文件，不加参数i时直接替换）
$ cp ../tempmp/mp.mk  mp.mk
加参数i时提示是否要覆盖：
$ cp -i  ../tempmp/mp.mk  mp.mk
cp: overwrite 'mp.mk'? yes

(2)-r 复制目录及目录内所有项目
将上级目录下的tempmp文件里的内容连同整个tempmp文件全部拷贝到了当前文件夹下
$ cp -r ../tempmp  .
lihang@DESKTOP-03PD899 MINGW64 ~/Desktop/张晶晶Git/zjj_project/tempss (main)
$ ll
-rw-r--r-- 1 lihang 197121 0 10月 21 20:54 c.mg
-rw-r--r-- 1 lihang 197121 0 10月 21 20:54 d.log
-rw-r--r-- 1 lihang 197121 0 10月 21 21:12 mp.mk
drwxr-xr-x 1 lihang 197121 0 10月 21 21:19 tempmp/

将上级目录下的tempmp文件里的内容全部拷贝到了当前文件夹下(不包含tempmp文件)
$ cp ../tempmp/* .
lihang@DESKTOP-03PD899 MINGW64 ~/Desktop/张晶晶Git/zjj_project/tempss (main)
$ ll
total 0
-rw-r--r-- 1 lihang 197121 0 10月 21 20:54 c.mg
-rw-r--r-- 1 lihang 197121 0 10月 21 20:54 d.log
-rw-r--r-- 1 lihang 197121 0 10月 21 21:23 hhh.ak
-rw-r--r-- 1 lihang 197121 0 10月 21 21:23 mp.mk
-rw-r--r-- 1 lihang 197121 0 10月 21 21:23 mpmk
drwxr-xr-x 1 lihang 197121 0 10月 21 21:19 tempmp/

(3)-a 复制的文件与原文件时间一样，举例中用到了 cp -ra命令
$ cp  ../tempmp/*   .
lihang@DESKTOP-03PD899 MINGW64 ~/Desktop/张晶晶Git/zjj_project/tempss (main)
$ ll
total 0
-rw-r--r-- 1 lihang 197121 0 10月 21 20:54 c.mg
-rw-r--r-- 1 lihang 197121 0 10月 21 20:54 d.log
-rw-r--r-- 1 lihang 197121 0 10月 21 21:30 hhh.ak 
-rw-r--r-- 1 lihang 197121 0 10月 21 21:30 mp.mk #文件显示时间为当前被复制时的时间
-rw-r--r-- 1 lihang 197121 0 10月 21 21:30 mpmk
drwxr-xr-x 1 lihang 197121 0 10月 21 21:11 tempmp/
lihang@DESKTOP-03PD899 MINGW64 ~/Desktop/张晶晶Git/zjj_project/tempss (main)
$ cp -ra ../tempmp/*  .
lihang@DESKTOP-03PD899 MINGW64 ~/Desktop/张晶晶Git/zjj_project/tempss (main)
$ ll
total 0
-rw-r--r-- 1 lihang 197121 0 10月 21 20:54 c.mg
-rw-r--r-- 1 lihang 197121 0 10月 21 20:54 d.log
-rw-r--r-- 1 lihang 197121 0 10月 21 21:10 hhh.ak #文件显示时间为在tempmp文件中创建的时间
-rw-r--r-- 1 lihang 197121 0 10月 21 21:11 mp.mk #文件显示时间为在tempmp文件中创建的时间
-rw-r--r-- 1 lihang 197121 0 10月 21 21:11 mpmk #文件显示时间为在tempmp文件中创建的时间
drwxr-xr-x 1 lihang 197121 0 10月 21 21:11 tempmp/#文件显示时间为tempmp文件被创建的时间

*********************************Linux用来查看文件内容：以下9-13，cat,more,less,head,tail***************************************
9.cat命令
(1)cat filename,显示文件内容
例：$ cat c.mg
hello world
jjz

(2-1)从键盘创建一个文件: 只能创建新文件，不能编辑已有文件。(如果当前新建文件已存在就直接覆盖)
cat > filename
文件内容
例：$ cat > b.tlog
hello pp
;
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ cat b.tlog
hello pp
;
(2-2)从键盘创建一个文件,cat<<EOF，以EOF输入字符为标准输入结束
例1：$ cat > b.tlog <<EOF
> wonderful
> magical
> helpless
> uncomfortable
> very myself
> EOF
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ cat b.tlog
wonderful
magical
helpless
uncomfortable
very myself

例2：$ cat >d.log <<end
> hellomzz
> end

autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ cat d.log
hellomzz



(3)cat file1 file2 > file 将几个文件合并为一个文件:
$ cat b.tlog c.mg d.log hhh.ak mp.mk  > mpmk
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ ls
b.tlog  c.mg  d.log  hhh.ak  mp.mk  mpmk  tempmp/
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ cat mpmk
hello world
jjz

(4-1)cat -n filename: 将文件里的内容加上行号输出
$ cat -n  c.mg
     1  hello world
     2  jjz
(4-2)cat -b filename:将文件里非空行的内容加上行号输出
 cat -b c.mg
     1  hello world
     2  #下面一行是空行

     3  jjz
(5)反向打印文件里的内容：tac命令
$ cat b.tlog
wonderful
magical
helpless
uncomfortable
very myself

autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ tac b.tlog
very myself
uncomfortable
helpless
magical
wonderful

10.more命令
功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，
而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。


11.less 命令
(1)less filename：显示文件内容
(2)less -p b.tlog c.mg:查看后一个文件的内容
(3)less -n b.tlog c.mg:查看前一个文件的内容

12.head 命令
head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。
常用参数：-n<行数> 显示的行数（行数为复数表示从最后向前数）
(1)head filename:不加参数时默认显示文件前10行
(2)head -n 8 b.tlog:显示文件的前n行
(3)head -n -8 b.tlog:输出文件除了最后n行的全部内容
(4)haed filename1 filename2:输出多个文件的内容
例：head b.tlog c.mg
==> b.tlog <==
wonderful
magical
helpless
uncomfortable
very myself
qq
o
yuuoiop
daasda
dadsadf
==> c.mg <==
hello world
#下面一行是空行
jjz

13.tail 命令
用于显示指定文件末尾内容
(1)tail b.tlog:输出文件最后10行内容
(2)-n<行数> 显示行数（从后向前）
$ tail -n 3  b.tlog:查看b.tlog的最后3行信息



****************************在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：************************
which   查看可执行文件的位置。
whereis 查看文件的位置。
locate  配合数据库查看文件位置。
find    实际搜寻硬盘查询文件名称。

14. which:查看命令位置
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ which ls
/usr/bin/ls
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
$ which which
/usr/bin/which


15.find 命令
find pathname -options 
(1)find pathname -name (按照文件名查找文件)
例1：$ find ./ -name 'tem*'#查找以tem开头的文件及文件夹
./tempmp
./tempss
./tempss/tempmp
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project (main)
例2：$ find ./ -name '*.txt'#查找以.txt结尾的文件及文件夹
./Git/Git笔记.txt
./Git/新建文本文档.txt
./Linux/Linux常用命令.txt
./Linux/Linux笔记.txt
例3：$ find -name *.mk
./tempmp/mp.mk
./tempss/mp.mk
./tempss/tempmp/mp.mk


(2)find ./ -perm (按文件权限查找文件)
$ find ./ -perm 644
./Git/git命令.xlsx
./Git/Git工作流程.pptx
./Git/Git笔记.txt
./Git/新建文本文档.txt
./Linux/Linux基础部分复习大纲.pdf
./Linux/Linux常用命令.txt

注：文件权限解释，(r,w,x)分别代表的意思是：(读,写,执行)权限数值分别为(4,2,1)
drwxr-xr-x 1 autost 197121       0 10月 23 14:36 tempss/
-rw-r--r-- 1 autost 197121      13 10月 12 10:34 README.md
解释上面两行：
第1位，-表示文件，d表示目录，l表示软连接
第2~4：表示这个文件的属主拥有的权限(user)
第5~7：表示这个文件的属主所在同一个组的用户所具有的权限(group)
第8~10：表示其他用户所具有的权限(other)

(3)find 目录(查看目录下的所有文件)
$ find ./tempss/
./tempss/
./tempss/b.tlog
./tempss/c.mg
./tempss/d.log
./tempss/hhh.ak
./tempss/mp.mk
./tempss/mpmk
./tempss/tempmp
./tempss/tempmp/hhh.ak
./tempss/tempmp/mp.mk
./tempss/tempmp/mpmk


16.chmod命令
语法
chmod [-cfvR] [--help] [--version] mode file...
参数说明
mode : 权限设定字串，格式如下 : [ugoa...][[+-=][rwxX]...][,...]
其中：
u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。
+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。
r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。
(1)chmod u=rw,g+x,o-w d.log
(2)chmod 777 b.tlog

17.tar 命令
用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。
弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件
https://www.cnblogs.com/aksir/p/9066611.html
(0)打包-->压缩(常用的3个命令如下)
tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成jpg.tar
tar –czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz
zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux

例1：$ tar -cvf m.tar *.m*
c.mg
mp.mk
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ tar -czf m.tar.gz *.m*
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ ll
total 17
-rw-r--r-- 1 autost 197121   157 10月 23 14:36 b.tlog
-rw-r--r-- 1 autost 197121    40 10月 22 15:32 c.mg
-rw-r--r-- 1 autost 197121     9 10月 22 15:38 d.log
-rw-r--r-- 1 autost 197121     0 10月 22 14:31 hhh.ak
-rw-r--r-- 1 autost 197121 10240 10月 27 11:37 m.tar
-rw-r--r-- 1 autost 197121   196 10月 27 11:38 m.tar.gz
-rw-r--r-- 1 autost 197121     0 10月 22 14:31 mp.mk
-rw-r--r-- 1 autost 197121    16 10月 22 15:25 mpmk
drwxr-xr-x 1 autost 197121     0 10月 22 14:31 tempmp/

(2)解压
tar –xvf file.tar //解压 tar包
tar -xzvf file.tar.gz //解压tar.gz
unzip file.zip //解压zip
例1：autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ tar -xvf m.tar
c.mg
mp.mk
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ tar -xzvf m.tar.gz
c.mg
mp.mk
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ ll
total 17
-rw-r--r-- 1 autost 197121   157 10月 23 14:36 b.tlog
-rw-r--r-- 1 autost 197121    40 10月 22 15:32 c.mg
-rw-r--r-- 1 autost 197121     9 10月 22 15:38 d.log
-rw-r--r-- 1 autost 197121     0 10月 22 14:31 hhh.ak
-rw-r--r-- 1 autost 197121 10240 10月 27 11:37 m.tar
-rw-r--r-- 1 autost 197121   196 10月 27 11:38 m.tar.gz
-rw-r--r-- 1 autost 197121     0 10月 22 14:31 mp.mk
-rw-r--r-- 1 autost 197121    16 10月 22 15:25 mpmk
drwxr-xr-x 1 autost 197121     0 10月 22 14:31 tempmp/



18.df 命令
显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。
默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：
-a 全部文件系统列表
-h 以方便阅读的方式显示信息
-i 显示inode信息
-k 区块为1024字节
-l 只显示本地磁盘
-T 列出文件系统类型
(1)df
$ df
Filesystem      1K-blocks      Used Available Use% Mounted on
C:/software/Git 104259764  73443596  30816168  71% /
D:              382866428 194782256 188084172  51% /d
(2)df -lhT,命令组合使用
$ df -lhT
Filesystem      Type  Size  Used Avail Use% Mounted on
C:/software/Git ntfs  100G   71G   30G  71% /
D:              ntfs  366G  186G  180G  51% /d

19.du
du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：
(1)du
$ du
0       ./tempmp
26      .
(2)du-a
autost@DESKTOP-IM2UOV2 MINGW64 ~/Desktop/ZjjGit/zjj_project/tempss (main)
$ du -a
0       ./a.kk
0       ./b.kk
1       ./b.tlog
0       ./c.kk
1       ./c.mg
1       ./d.log
0       ./hhh.ak
4       ./kk.tar
1       ./kk.tar.gz
12      ./m.tar
1       ./m.tar.gz
0       ./mp.mk
1       ./mpmk
0       ./tempmp/hhh.ak
0       ./tempmp/mp.mk
0       ./tempmp/mpmk
0       ./tempmp
26      .

20.data(显示或设定系统的日期与时间)
$ date
2021年10月27日 14:50:58

21.grep 命令
强大的文本搜索命令,全局正则表达式搜索
(1)ps -ef | grep ，查看进程
$ ps -ef | grep autost
  autost    1142       1 ?          Oct 26 /usr/bin/mintty
  autost    1143    1142 pty1       Oct 26 /usr/bin/bash
  autost    1140       1 ?          Oct 26 /usr/bin/ssh-agent
  autost    1218    1217 pty0     15:35:40 /usr/bin/bash
  autost    1241       1 ?        15:35:41 /usr/bin/ssh-agent
  autost    1981    1143 pty1     15:28:46 /usr/bin/bash
  autost    1980    1143 pty1     15:28:46 /usr/bin/ps
  autost    1217       1 ?        15:35:40 /usr/bin/mintty
  autost    1166       1 ?          Oct 26 /usr/bin/ssh-agent
(2))ps -ef | grep -c,查看进程数
$ ps -ef | grep autost -c
9
(3)打印b.tlog中包含ha字符串的行数据
$ grep  ha  b.tlog
chain
happy
happy new year
(4)#加参数-c是打印b.tlog中包含ha字符串的行数总和
$ grep -c  ha  b.tlog
3
(5)加参数rni是打印递归匹配当前目录下 所有包含 ha 字符串的文件
$ grep -rni  ha  b.tlog
12:chain
14:happy
17:happy new year
$ grep -rni  ha  ./
./b.tlog:12:chain
./b.tlog:14:happy
./b.tlog:17:happy new year

22.wc 命令
wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出
(1)
$ wc -l b.tlog
22 b.tlog

23.ps 命令
ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top
linux上进程有5种状态:
1. 运行(正在运行或在运行队列中等待)
2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)
3. 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)
4. 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)
5. 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)

ps 工具标识进程的5种状态码:
D 不可中断 uninterruptible sleep (usually IO)
R 运行 runnable (on run queue)
S 中断 sleeping
T 停止 traced or stopped
Z 僵死 a defunct (”zombie”) process

命令参数：
a 显示所有进程
-a 显示同一终端下所有进程
c 显示进程真实名称
e 显示环境变量
f 显示进程间的关系
r 显示当前终端运行的进程
-aux 显示所有包含其它使用的进程

(1)ps -ef:显示当前所有进程环境变量及进程间关系
$ ps -ef
     UID     PID    PPID  TTY        STIME COMMAND
  autost    1142       1 ?          Oct 26 /usr/bin/mintty
  autost    1143    1142 pty1       Oct 26 /usr/bin/bash
  autost    1140       1 ?          Oct 26 /usr/bin/ssh-agent
  autost    2197    2196 pty2     16:24:19 /usr/bin/bash
  autost    2338    1143 pty1     16:42:12 /usr/bin/ps
  autost    2196       1 ?        16:24:19 /usr/bin/mintty
  autost    1218    1217 pty0       Oct 26 /usr/bin/bash
  autost    1241       1 ?          Oct 26 /usr/bin/ssh-agent
  autost    2220       1 ?        16:24:22 /usr/bin/ssh-agent
  autost    1217       1 ?          Oct 26 /usr/bin/mintty
  autost    1166       1 ?          Oct 26 /usr/bin/ssh-agent

(2)ps -a:显示当前所有进程
$ ps -a
      PID    PPID    PGID     WINPID   TTY         UID    STIME COMMAND
     1142       1    1142       5848  ?         197609   Oct 26 /usr/bin/mintty
     1143    1142    1143       2724  pty1      197609   Oct 26 /usr/bin/bash
     1140       1    1140       8324  ?         197609   Oct 26 /usr/bin/ssh-agent
     2197    2196    2197      49012  pty2      197609 16:24:19 /usr/bin/bash
     2196       1    2196      51812  ?         197609 16:24:19 /usr/bin/mintty
     1218    1217    1218      15112  pty0      197609   Oct 26 /usr/bin/bash
     1241       1    1241      16344  ?         197609   Oct 26 /usr/bin/ssh-agent
     2220       1    2220      49328  ?         197609 16:24:22 /usr/bin/ssh-agent
     1217       1    1217      15488  ?         197609   Oct 26 /usr/bin/mintty
     2474    1143    2474      53152  pty1      197609 17:08:05 /usr/bin/ps
     1166       1    1166        344  ?         197609   Oct 26 /usr/bin/ssh-agent
(3)与grep联用查找某进程
ps -aux | grep apache


24.top 命令
显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等
























