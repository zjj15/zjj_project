1、https://www.techug.com/post/mysql-command-usage.html

2、这个真的…，大家一定要记住，Mysql，表名、字段名、数据库名用``（反引号）

值一定要用''啊（单引号）

使用：用的Mysql Workbench界面化工具

#大纲
1、增删改查数据表（对表的数据操作）insert、delete、update、select
2、对表的结构操作，增删改查，create、drop、alter、show tables；
3、索引：提高查看速度
4、数据库的事务 ：ACID
5、关键字：
limit、like





菜鸟教程：https://www.runoob.com/mysql/mysql-tutorial.html
命令：
1、连接数据库
2、创建数据库：create databse datbase_name;
3、查看数据库：show databases;查看数据库中有哪些表：show tables;
4、选择数据库：use database_name；
5、创建表：
create table table_name(
    `name1` varchar(100) not null，
    `name2` varchar(40) not null，
    `name3` Date，
    primary key(`name3`)
)；

mysql> create table table_3(
    -> date3 DATE,
    -> weather3 varchar(40),
    -> value3 int,
    -> primary key(`value3`));

#############################补充:创建表######################################33
#主键：primary key
#外键 foreign key http://c.biancheng.net/view/2441.html
#唯一性约束关键字
#默认值 Default
drop table if exists exercise;
create table exercise(
name varchar(256) unique,
id int(25) not null  auto_increment ,
class char(10) ,
grade float default 90,
primary key(id),
#primary key(name,id),exercise
constraint fk foreign key(class) references etable1(f_id)
);



6、在表里插入数据： 
insert into table_name（name1,name2,name3）
values
("***","***","***")；
7、查看表里内容：select * from table_name;
8、查看表的结构：show columns from table_name  或者 decribe table_name
#8.1查看表结构 
#查看表的字段信息，包括主键;show create table 表名
desc etable1;
describe etable2;
#查看数据表的创建语句;DESC/describe tablename
show create table exercise;

9、查看表里某列的值：
mysql> select date1 from tabale_1;
+------------+
| date1      |
+------------+
| 2021-05-23 |
+------------+
1 row in set (0.00 sec)
10、删除数据表：
mysql> drop table table_4;
Query OK, 0 rows affected (0.05 sec)
11、删除数据库：
mysql> drop database day1_database1;
Query OK, 0 rows affected (0.05 sec)
12、where语句：
mysql> select * from tabale_1 where Date1=`date1`;
+------------+---------+--------+
| Date1      | Weather | Week   |
+------------+---------+--------+
| 2021-05-23 | 阵雨    | 星期日 |
+------------+---------+--------+
1 row in set (0.00 sec)

13、update语句
 update tabale_1 set Date1='2021-05-25',Weather='晴',Week='星期二' where Date1='2021-05-25';
Query OK, 0 rows affected (0.00 sec)
Rows matched: 1  Changed: 0  Warnings: 0

mysql> select * from tabale_1;
+------------+---------+--------+
| Date1      | Weather | Week   |
+------------+---------+--------+
| 2021-05-23 | 阵雨    | 星期日 |
| 2021-05-24 | 晴      | 星期一 |
| 2021-05-25 | 晴      | 星期二 |
+------------+---------+--------+

14、delete
ysql> delete from tabale_1 where date1='2021-05-25';
Query OK, 1 row affected (0.01 sec)

mysql> select * from tabale_1;
+------------+---------+--------+
| Date1      | Weather | Week   |
+------------+---------+--------+
| 2021-05-23 | 阵雨    | 星期日 |
| 2021-05-24 | 晴      | 星期一 |
+------------+---------+--------+
2 rows in set (0.00 sec)

15、like语句：
mysql> select * from table_2;
+----------+-------------+-------+
| data     | dns         | value |
+----------+-------------+-------+
| 百度     | baidu.com   |     1 |
| 腾旭     | tengxun.com |     2 |
| 阿里     | ali.com     |     3 |
| 百里守约 | blsy.www    |     4 |
+----------+-------------+-------+
4 rows in set (0.00 sec)

mysql> select * from table_2 where dns like '%com';
+------+-------------+-------+
| data | dns         | value |
+------+-------------+-------+
| 百度 | baidu.com   |     1 |
| 腾旭 | tengxun.com |     2 |
| 阿里 | ali.com     |     3 |
+------+-------------+-------+
3 rows in set (0.00 sec)

mysql> select data from table_2 where dns like '%com';
+------+
| data |
+------+
| 百度 |
| 腾旭 |
| 阿里 |
+------+
3 rows in set (0.00 sec)


16、修改表中字段：
mysql> alter table table_2
    -> change column date2 data varchar(100);
Query OK, 0 rows affected (0.14 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> alter table table_2
    -> change column value2 value int;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> alter table table_2
    -> change column weather2 dns varchar(100);#将Weather2列改成dns
Query OK, 0 rows affected (0.11 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> describe table_2;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| data  | varchar(100) | YES  |     | NULL    |       |
| dns   | varchar(100) | YES  |     | NULL    |       |
| value | int          | NO   | PRI | NULL    |       |
+-------+--------------+------+-----+---------+-------+

17、修改表名：
-- 修改表名 
rename table old_table to new_table;

##############################补充：修改表####################################3
#修改表名 alter table oldtablename rename(to) newtablename
alter table user_profile rename user_pro;
alter table user_pro rename to user_profile;
#修改字段 
#1修改字段的数据类型：alter table tablename modify 字段名 数据类型
alter table etable1 modify s_id char(255) NOT NULL;
#2.修改表字段名： alter table tablename change old字段名 new字段名 新数据类型
alter table etable1 change s_id is_id int not null;

#添加字段 alter table tablename add new字段名 数据类型 约束条件 [first|after 已存在的字段名]
#(first 指的是把新加字段添加成第一列的字段，after已存在的字段指的是把新加字段放在已存在的字段后面)
alter table etable1 add _gender char(255) not null first;
alter table etable1 add gender_ char(255) not null after f_price;

#删除字段 alter table tablename drop 字段名
alter table etable1 drop _gender;

#修改字段排列位置alter table tablename modify 字段1 数据类型 [first|after 字段2]
alter table etable1 modify gender char(20)  after gender_;

#修改存储引擎 alter table tablename engine=new引擎名
show create table etable1 ;#查看存储引擎为innodb
alter table etable1 engine=InnoDB;

#删除表的外键约束 alter table tablenaame drop foreign key 外键约束名
alter table exercise drop foreign key fk;

##删除没有被关联的表：drop table [if exists] 表1，表2，...表n

#删除被其他表关联的主表，首先要取消关联表的外键约束
#取消关联表的外键约束 alter table exercise drop foreign key fk;
#删除子表 drop table etble1


18、union、union all
UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）
UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）

mysql> select Date1,Weather from tabale_1 where value =1
    -> union all
    -> select data,dns from table_2 where value=1
    -> order by Date1;#生成得列名为第一个表得列名，俩个表列数要相同，即select
+------------+-----------+
| Date1      | Weather   |
+------------+-----------+
| 2021-05-23 | 阵雨      |
| 百度       | baidu.com |
+------------+-----------+
2 rows in set (0.00 sec)

mysql> select value,Date1,Weather from tabale_1
    -> union all
    -> select value,data,dns from table_2
    -> order by value;
+-------+------------+-------------+
| value | Date1      | Weather     |
+-------+------------+-------------+
|     1 | 2021-05-23 | 阵雨        |
|     1 | 百度       | baidu.com   |
|     2 | 2021-05-24 | 晴          |
|     2 | 腾旭       | tengxun.com |
|     3 | 阿里       | ali.com     |
|     4 | 百里守约   | blsy.www    |
+-------+------------+-------------+
6 rows in set (0.00 sec)

19、给当前表添加列：(https://www.cnblogs.com/ysource/articles/13693055.html)
alter table 表名 add 字段名 类型 约束条件;

例子1：alter table student add isDelete int(11);

20、排序 order by
SELECT field1, field2,...fieldN FROM table_name1, table_name2...
ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]
你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。
mysql> select place,value from tabale_1 where place='CN'
    -> union all
    -> select place,value from table_2 where place='CN'
    -> order by place ASC , value DESC ;
+-------+-------+
| place | value |
+-------+-------+
| CN    |     6 |
| CN    |     6 |
| CN    |     3 |
| CN    |     3 |
| CN    |     1 |
| CN    |     1 |
+-------+-------+
6 rows in set (0.00 sec)

mysql> select value,dns from table_2 where dns like '%com'
    -> union all
    -> select value,dns from table_3 where dns like '%com'
    -> order by  value ASC ;
+-------+-------------+
| value | dns         |
+-------+-------------+
|     1 | baidu.com   |
|     1 | baidu.com   |
|     2 | tengxun.com |
|     2 | tengxun.com |
|     3 | ali.com     |
|     3 | ali.com     |
|     5 | aql.com     |
|     5 | aql.com     |
|     7 | dj.com      |
|     7 | dj.com      |
|     8 | mq.com      |
|     8 | mq.com      |
+-------+-------------+
12 rows in set (0.02 sec)

mysql> select value,dns from table_2 where dns like '%com'
    -> union
    -> select value,dns from table_3 where dns like '%com'
    -> order by  value ASC ;
+-------+-------------+
| value | dns         |
+-------+-------------+
|     1 | baidu.com   |
|     2 | tengxun.com |
|     3 | ali.com     |
|     5 | aql.com     |
|     7 | dj.com      |
|     8 | mq.com      |
+-------+-------------+
6 rows in set (0.00 sec)

mysql>

21、group by；group by with rollup
create table table_4(
    `id` int(11) NOT NULL,
  `name` char(10) NOT NULL DEFAULT '',
  `date` datetime NOT NULL,
  `singin` tinyint(4) NOT NULL DEFAULT '0' COMMENT '登录次数',
  #创建新表的脚本中， 可在字段定义脚本中添加comment属性来添加注释。
  PRIMARY KEY (`id`)
)
INSERT INTO `table_4` VALUES ('1', '小明', '2016-04-22 15:25:33', '1'), ('2', '小王', '2016-04-20 15:25:47', '3'), ('3', '小丽', '2016-04-19 15:26:02', '2'), ('4', '小王', '2016-04-07 15:26:14', '4'), ('5', '小明', '2016-04-11 15:26:40', '4'), ('6', '小明', '2016-04-04 15:26:54', '2');
COMMIT;#一行全部插入

select coalesce(name,'总数'),count(name) from table_4 group by name ;
select coalesce(name,'总数'),count(*) from table_4 group by name with rollup ;
select coalesce(name,'总数'),sum(singin) as singin_count from table_4 group by name with rollup ;
#select coalesce(name,'总数'),sum(*) as singin_count from table_4 group by name with rollup ;

22、join -》inner join；left join;right join;
select a.Date1,a.place,b.data from table_1 a inner join table_2 b on a.place=b.place;
select a.Date1,a.place,a.value,b.data from table_1 a inner join table_2 b where a.place=b.place and a.value = b.value;
select a.Date1,a.place,b.data from table_1 a left join table_2 b on a.place=b.place;
select a.Date1,a.place,b.data from table_1 a right join table_2 b on a.place=b.place;

23、
SELECT * from table_5;
SELECT * from table_5 where count is not null;
SELECT * from table_5 where count is  null;

以下实例中你可以看到 = 和 != 运算符是不起作用的：
mysql> SELECT * FROM runoob_test_tbl WHERE runoob_count = NULL;
Empty set (0.00 sec)
mysql> SELECT * FROM runoob_test_tbl WHERE runoob_count != NULL;
Empty set (0.01 sec)
查找数据表中 runoob_test_tbl 列是否为 NULL，必须使用 IS NULL 和 IS NOT NULL，如下实例：
mysql> SELECT * FROM runoob_test_tbl WHERE runoob_count IS NULL;
+---------------+--------------+
| runoob_author | runoob_count |
+---------------+--------------+
| 菜鸟教程  | NULL         |
| Google        | NULL         |

24.正则表达式
25.事务，原子性、一致性、隔离性、持久性
MYSQL 事务处理主要有两种方法：
1、用 BEGIN, ROLLBACK, COMMIT来实现

BEGIN 开始一个事务
ROLLBACK 事务回滚
COMMIT 事务确认
2、直接用 SET 来改变 MySQL 的自动提交模式:

SET AUTOCOMMIT=0 禁止自动提交
SET AUTOCOMMIT=1 开启自动提交

mysql> select * from table_5;
+----------+-------+-------+
| author   | count | money |
+----------+-------+-------+
| RUNOOB   |    20 |  2000 |
| 菜鸟教程 |  NULL |  NULL |
| Google   |  NULL |  NULL |
| FK       |    20 |  NULL |
| RUNOOB   |    20 |  2000 |
+----------+-------+-------+
5 rows in set (0.00 sec)

mysql> update table_5 set money=3000 where author='菜鸟教程';
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> update table_5 set money=5000 where author='Google';
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> commit;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from table_5;
+----------+-------+-------+
| author   | count | money |
+----------+-------+-------+
| RUNOOB   |    20 |  2000 |
| 菜鸟教程 |  NULL |  3000 |
| Google   |  NULL |  5000 |
| FK       |    20 |  NULL |
| RUNOOB   |    20 |  2000 |
+----------+-------+-------+
5 rows in set (0.00 sec)

mysql> begin;
Query OK, 0 rows affected (0.00 sec)

mysql> update table_5 set money=4000 where author='FK';
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> rollback;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from table_5;
+----------+-------+-------+
| author   | count | money |
+----------+-------+-------+
| RUNOOB   |    20 |  2000 |
| 菜鸟教程 |  NULL |  3000 |
| Google   |  NULL |  5000 |
| FK       |    20 |  NULL |
| RUNOOB   |    20 |  2000 |
+----------+-------+-------+
5 rows in set (0.00 sec)

mysql> update table_5 set money=4000 where author='FK';
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> commit;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from table_5;
+----------+-------+-------+
| author   | count | money |
+----------+-------+-------+
| RUNOOB   |    20 |  2000 |
| 菜鸟教程 |  NULL |  3000 |
| Google   |  NULL |  5000 |
| FK       |    20 |  4000 |
| RUNOOB   |    20 |  2000 |
+----------+-------+-------+
5 rows in set (0.00 sec)

26.alter
删除数据表的某一列： 
alter table 表名 drop 字段名；
alter table table_5 drop count;

mysql> select * from table_5;
+----------+-------+-------+
| author   | count | money |
+----------+-------+-------+
| RUNOOB   |    20 |  2000 |
| 菜鸟教程 |  NULL |  3000 |
| Google   |  NULL |  5000 |
| FK       |    20 |  4000 |
| RUNOOB   |    20 |  2000 |
+----------+-------+-------+
5 rows in set (0.00 sec)

mysql> alter table table_5 drop count;
Query OK, 0 rows affected (0.00 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> select * from table_5;
+----------+-------+
| author   | money |
+----------+-------+
| RUNOOB   |  2000 |
| 菜鸟教程 |  3000 |
| Google   |  5000 |
| FK       |  4000 |

################################################################################
1.查询
1.0 基本查询语句
1.1 单表查询
1.2 使用集合函数查询
1.3 连接查询
1.4 子查询

#############code##########3
1.0 基本查询语句
create table table2_1
(
f_id char(10) NOT Null,
s_id INT NOT Null,
f_name char(255) NOT Null,
f_frice decimal(8,2) NOT Null,
primary key(f_id)
);

insert into table2_1(f_id,s_id,f_name,f_price)
values
('a1',101,'apple',5.2),
('b1',101,'blackberry',10.2),
('c1',102,'orange',11.2);

alter table table2_1
change column f_frice f_price decimal(8,2) NOT Null;
mysql> select * from table2_1
    -> ;
+------+------+------------+---------+
| f_id | s_id | f_name     | f_price |
+------+------+------------+---------+
| a1   |  101 | apple      |    5.20 |
| b1   |  101 | blackberry |   10.20 |
| c1   |  102 | orange     |   11.20 |
+------+------+------------+---------+
3 rows in set (0.00 sec)


insert into etable1(f_id,s_id,f_name,f_price)
values
('a1',101,'apple',5.2),
('b1',101,'blackberry',10.2),
('c1',102,'orange',11.2);

#单表查询
1.筛选所有数据
select * from etable1(*)
2.(具体字段名)
select f_id,f_name,f_price from etable1
3.where语句，查询确定条件数据
select f_name,f_price from etable1 where f_price=10.2
4.where语句查询指定范围数据
select f_id,f_name,f_price from etable1 where f_price<10.2;
5.where语句查询in字句数据并按价格排序
select f_id,f_name,f_price from etable1 where f_price in (5.2,10.2)order by f_price;#值为5.2 和10.2
6.not in
select f_id,f_name,f_price from etable1 where f_price not in (5.2,10.2)order by f_price;
7.between and
select f_id,f_name,f_price from etable1 where f_price between 5.2 and 10.2 order by f_price;
8.not between and
select f_id,f_name,f_price from etable1 where f_price not between 8.2 and 10.2 order by f_price;
9.like，%通配符匹配任意长度，_下划线通配符一次只能匹配一个字符，要想匹配多个字符就要用多个下划线
select f_id,f_name,f_price from etable1 where f_name like '%e';（结尾是e的记录）
select f_id,f_name,f_price from etable1 where f_name like 'm%';（m开头的记录）
select f_id,f_name,f_price from etable1 where f_name like '%n%';（包含n记录）
select f_id,f_name,f_price from etable1 where f_name like 'm%n';（m开头n结尾的记录）
select f_id,f_name,f_price from etable1 where f_name like '____n';（_n前面有4个下划线）
10.查询空值 IS NULL/is not null
select * from etable2 where c_email is Null;
select * from etable2 where c_email is not Null;
11.and多条件查询
select f_id,s_id,f_name,f_price from etable1 where s_id <102  And f_price>8.2;
12.or多条件查询
select f_id,s_id,f_name,f_price from etable1 where s_id <102  or f_price>8.2;
13.distinct 消除重复字段值
select distinct s_id from etable1;
14.排序order by；单列排序，多列排序，指定升降序
单列排序
select f_name from etable1 order by f_name;
多列排序
select f_name,f_price from etable1 order by f_name,f_price;
select f_name,f_price from etable1 order by f_price,f_name;
指定升降序
select f_name,f_price from etable1 order by f_price DESC;（降序）
select f_name,f_price from etable1 order by f_price DESC,f_name ASC ;（降序，升序，ASC关键字不写的话也会默认是升序）
15.分组查询group by 字段 having 条件表达式
select s_id, count(*) as total from etable1 group by s_id;
注：count()函数计算s_id中包含了几条记录，并生成total列将结果输出到total列
+------+-------+
| s_id | total |
+------+-------+
|  101 |     2 |
|  104 |     2 |
|  102 |     1 |
|  103 |     3 |
+------+-------+
select s_id, group_concat(f_name) as Name from etable1 group by s_id;
注：group_concat(f_name) as Name，将s_id分组后的f_name的内容显示在生成的Name列
注：group_concat函数：将group by产生的同一个分组中的值连接起来，返回一个字符串结果
+------+-------------------+
| s_id | Name              |
+------+-------------------+
|  101 | apple,blackberry  |
|  102 | orange            |
|  103 | melon,melon,lemon |
|  104 | banana,pear       |
+------+-------------------+
select s_id, group_concat(f_name) as Name from etable1 group by s_id having count(f_name)>1;
+------+-------------------+
| s_id | Name              |
+------+-------------------+
|  101 | apple,blackberry  |
|  103 | melon,melon,lemon |
|  104 | banana,pear       |
+------+-------------------+
16.group by与with rollup连用，WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）
select s_id, count(*) as total from etable1 group by s_id with rollup;
+------+-------+
| s_id | total |
+------+-------+
|  101 |     2 |
|  102 |     1 |
|  103 |     3 |
|  104 |     2 |
| NULL |     8 |
+------+-------+
17.group by多字段分组（本地测试不对，需要研究）
mysql根据多字段的值来进行层次分组，
分组层次从左到右，先按第一个字段分组，然后第一个字段值相同的记录中再根据第二个字段值分组
group by university,gender; 
group by 字段1，字段2，字段n

18.group by与order by连用
select s_id, count(*) as total from etable1 group by s_id order by total;
+------+-------+
| s_id | total |
+------+-------+
|  102 |     1 |
|  104 |     2 |
|  101 |     3 |
|  103 |     3 |
+------+-------+
注：当使用order by时不能同时使用rollup(因为有NULL值)
19.limit返回指定位置的记录（记录偏移量从0开始）
limit 位置偏移量 行数
select * from etable1 limit 4;返回前四行
select * from etable1 limit 4，3；返回从第5行开始的三行内容

20.使用集合函数查询
1.count()
count(*):计算总行数，不管是不是空
count(字段名)：计算该字段列的行数，不计算null

2.sum(字段名) 求和

3.avg(字段名) 求平均值

4.max(字段名) 返回字段中最大值

5.min(字段名) 返回字段中最小值

max和min也可用于字符查询,按照ASCLL码查询


连接查询：
1.内连接查询 inner join 表名 on 连接条件
可以和不同的表连接，也可以同一个表连接(自连接)

不连接表查询
select f1.f_id,f1.f_name, f2.f_price
from fruit1,fruit2
where f1.s_id=f2.s_id 

连接表查询
select f1.f_id,f1.f_name f2.f_price
from fruit1 inner join fruit2 on f1.s_id=f2.s_id 






































































#1、牛客网用到union
union:MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。
可选参数：
expression1, expression2, ... expression_n: 要检索的列。
tables: 要检索的数据表。
WHERE conditions: 可选， 检索条件。
DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。
ALL: 可选，返回所有结果集，包含重复数据。
union all是返回所有结果集，包含重复数据

#2、牛客网用到count函数里面使用if语句
count(if())的写法应该是count(if(表达式表达式，true,null));
count(if(category=1,true,null))中count函数返回一个布尔值类型的数值，
如果category=1,返回true,如果category不等于1返回null，
如果写成count(If(category=1,1,0) 则返回的全是true,也就是说全都会计数，
而count()间断内容是true还是null,如果不是null就计数，如果是null就不计数。

MySQL COUNT() 函数统计数据表中包含的记录行的总数，或者根据查询结果返回列中包含的数据行数，使用方法有以下两种：
COUNT(*) 计算表中总的行数，无论某列有数值或者为空值。
COUNT（字段名）计算指定列下总的行数，计算时将忽略空值的行。
age is null

#3.牛客网用到if语句
if 两个判断：IF(expr,v1,v2)	如果表达式 expr 成立，返回结果 v1；否则，返回结果 v2。	
if 多个判断：if(expr,v1,if(expr,v2,if(expr,v3,v2)))
举例：
select device_id,gender, 
if(age<20,'20岁以下',if(age between 20 and 24,'20-24岁',if(age>=25,'25岁及以上','其他'))) as age_cut
from user_profile;

