#牛客网做题笔记：
'1', '2138', 'male', '21', '北京大学', '3.4'
'2', '3214', 'male', NULL, '复旦大学', '4.0'
'3', '6543', 'female', '20', '北京大学', '3.2'
'4', '2315', 'female', '23', '浙江大学', '3.6'
'5', '5432', 'male', '25', '山东大学', '3.8'
'6', '2131', 'male', '28', '北京师范大学','3.3'



1.查询device_id数据前两行
select device_id from table1 limit 2;

2.查询device_id数据前两行并将字段名改为user_infors_example
做法1：SELECT device_id as user_infors_example from user_profile LIMIT 2;
做法2：SELECT device_id  user_infors_example from user_profile LIMIT 2; 不用as代表直接起别名

3.去重 distinct 字段名 
select distinct device_id from user_profile;

4.20岁及以上且23岁及以下
做法1：select device_id,gender,age from user_profile where age < 24;
做法2：SELECT device_id, gender, age FROM user_profile WHERE age >= '20' AND age <='23';
做法3：select device_id,gender,age from user_profile where age between 20 and 23;

5.查看除复旦大学以外的所有用户明细
做法1：select device_id,gender,age,university from user_profile where university !='复旦大学';
做法2：select device_id,gender,age,university from  user_profile where university NOT IN("复旦大学");
做法3：select device_id,gender,age,university from user_profile where university <> '复旦大学'
#注： ！=是以前sql标准，<>是现在使用的sql标准，推荐使用<>。

6.剔除没有获取到年龄的用户，请你取出所有年龄值不为空的用户明细数据。
做法1：select device_id,gender,age,university from user_profile where age is not null;

7.要找到学校为北大、复旦和山大的同学进行调研，请你取出相关数据
做法1：select device_id,gender,age,university,gpa from user_profile where university in('北京大学','复旦大学','山东大学');

8.要找到gpa在3.5以上的山东大学用户 或 gpa在3.8以上的复旦大学同学进行用户调研，请你取出相应数据
select device_id,gender,age,university,gpa from user_profile 
where (gpa >3.5 and university='山东大学')
or (gpa > 3.8 and university='复旦大学')


9.想要知道复旦大学学生gpa最高值是多少
做法1：SELECT gpa from user_profile order by university='复旦大学'DESC LIMIT 1;
做法2：select max(gpa) from user_profile where university='复旦大学'

10.想要看一下男性用户有多少人以及他们的平均gpa是多少，用以辅助设计相关活动，请你取出相应数据。
做法1：select 
count(gender) as male_num,
round(avg(gpa),1) as avg_gpa
from user_profile
where gender='male'
#Round函数是保留几位小数，所以这个意思就是gpa的平均值保留1位小数


————————————————————————————————————————表内容——————————————————————————————————————————
# id	device_id	gender	age	university	gpa	active_days_within_30	question_cnt	answer_cnt
1	    2138	    male	21	北京大学	3.4	    7	                        2	        12
2	    3214	    male		复旦大学	4	    15                      	5	        25  
3	    6543	    female	20	北京大学	3.2	    12	                        3	        30
4	    2315	    female	23	浙江大学	3.6	    5	                        1	        2
5	    5432	    male	25	山东大学	3.8	    20	                        15      	70
6	    2131	    male	28	山东大学	3.3	    15                      	7	        13
7	    4321	    male	28	复旦大学	3.6	    9	                        6	        52
————————————————————————————————————————表内容——————————————————————————————————————————

11.想要对每个学校不同性别的用户活跃情况和发帖数量进行分析，请分别计算出每个学校每种性别的用户数、30天内平均活跃天数和平均发帖数量
select gender, university,
count(gender) as user_num,
round(AVG(active_days_within_30),1) as avg_active_day,
round(AVG(question_cnt),1) as avg_question_cnt
from user_profile
group by university,gender;
考察点：group by 多字段

12.现在运营想查看每个学校用户的平均发贴和回帖情况，寻找低活跃度学校进行重点运营，请取出平均发贴数低于5的学校或平均回帖数小于20的学校。
select university,
round(AVG(question_cnt),1) as avg_question_cnt,
round(AVG(answer_cnt),1) as avg_answer_cnt
from user_profile
group by university HAVING round(AVG(question_cnt),1) < 5 or round(AVG(answer_cnt),1) < 20 ;


13.现在运营想要查看不同大学的用户平均发帖情况，并期望结果按照平均发帖情况进行升序排列，请你取出相应数据。
select university,
round(AVG(question_cnt),4) as avg_question_cnt
from user_profile
group by university order by round(AVG(question_cnt),4) ASC;


14.
SELECT question_practice_detail.device_id, 
question_practice_detail.question_id, 
question_practice_detail.result
from question_practice_detail INNER join user_profile on
question_practice_detail.device_id=user_profile.device_id
where university='浙江大学';


22.有问题，回去再看
select user_profile.university,
round(count(question_practice_detail.question_id) / count(DISTINCT question_practice_detail.device_id), 4) as avg_answer-cnt
from user_profile INNER JOIN question_practice_detail on user_profile.device_id = question_practice_detail.device_id
group by user_profile.university;











