python连接mysql的几种方式(https://blog.csdn.net/shdxhsq/article/details/107724207)
(1) 什么是 mysql.connector？
由于 MySQL 服务器以独立的进程运行，并通过网络对外服务，所以，需要支持 Python 的 MySQL 驱动来连接到 MySQL 服务器。
目前，有两个 MySQL 驱动：
mysql-connector-python：是 MySQL 官方的纯 Python 驱动；
MySQL-python ：是封装了 MySQL C驱动的 Python 驱动。

(2) 什么是 PyMySQL？<推荐使用>
PyMySQL 是 Python 中用于连接 MySQL 服务器的一个库，它遵循 Python 数据库 API 规范 V2.0，并包含了 pure-Python MySQL 客户端库。
(PyMySQL 是纯 Python 实现的驱动，速度上比不上 MySQLdb，最大的特点可能就是它的安装方式没那么繁琐，同时也兼容 MySQL-python)

(3)什么是MySQLdb？<停用>
MySQLdb 是用于 Python 连接 MySQL 数据库的接口，它实现了 Python 数据库 API 规范 V2.0，基于 MySQL C API 上建立的。
(MySQL-python 又叫 MySQLdb，是 Python 连接 MySQL 最流行的一个驱动，很多框架都也是基于此库进行开发，
遗憾的是它只支持 Python2.x，而且安装的时候有很多前置条件，因为它是基于C开发的库，
在 Windows 平台安装非常不友好，经常出现失败的情况，现在基本不推荐使用，取代的是它的衍生版本。)
(MySQLdb只只支持到py3.4，建议py选手忘记它吧.python官方都在2021年停止py2开发啦)

(4)mysqlclient:<MySQLdb的接替者，单手从star上看出其势头已经被pymysql超越了>
(由于 MySQL-python 年久失修，后来出现了它的 Fork 版本 mysqlclient，完全兼容 MySQLdb，同时支持 Python3.x，是 Django ORM的依赖工具，如果你想使用原生 SQL 来操作数据库，那么推荐此驱动。)

(5)Flask-MySQL

**************Python MySQL - mysql-connector 驱动******************************************
python-mysql:python中使用数据库：mysql.connector

#导入mysql包
import mysql.connector

创建数据库连接：
mydb = mysql.connector.connect(
	host="localhost" #数据库主机地址
	user="yourusername" #数据库用户名
	passwd="yourpassword" #数据库密码
	database="runoob_db" #如果要直接连接一个数据库就加上这一句
)
print(mydb)


#数据库游标cursor
mycursor = mydb.cursor()
#查看数据库是否存在
mycursor.execute("show Databases")
#创建一个数据库
mycursor.execute("Create database runoob_db")
#创建数据表,sites是数据表的表名
mycursor.execute(""create table sites(name varchar(255),url varchar(255)))
#查看数据表是否已经存在
mycursor.execute("show tables")
#主键设置(表已存在时)
mycursor.execute("alter table sites add column id int auto_increment primary key")
#主键设置(表还未创建时)
mycursor.execute("CREATE TABLE sites (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), url VARCHAR(255))")

#插入数据
mysql里面的用法是：
mysql> INSERT INTO runoob_tbl
    -> (runoob_title, runoob_author, submission_date)
    -> VALUES
    -> ("JAVA 教程", "RUNOOB.COM", '2016-05-06');
Query OK, 1 rows affected (0.00 sec)
mysql>

python里面的用法是：
Sql="insert into sites(name,url) values(%s,%s)"
val=("RUNOOB", "https://www.runoob.com")
mycursor.execute(sql,val)
mydb.commit()#数据表内容有更新，必须使用到该语句
print(mycursor.rowcount, "记录插入成功")#rowcount应该是一个属性


#批量插入数据
批量插入使用 executemany() 方法，该方法的第二个参数是一个元组列表，包含了我们要插入的数据：

sql = "INSERT INTO sites (name, url) VALUES (%s, %s)"
val = [
  ('Google', 'https://www.google.com'),
  ('Github', 'https://www.github.com'),
  ('Taobao', 'https://www.taobao.com'),
  ('stackoverflow', 'https://www.stackoverflow.com/')
]
mycursor.executemany(sql，val)
print(mycursor.rowcount, "记录插入成功")

#查询数据
mycursor.execute("SELECT * FROM sites")
myresult = mycursor.fetchall()     # fetchall() 获取所有记录
for x in myresult:
  print(x)
  
#读取指定的字段数据：
mycursor.execute("SELECT name, url FROM sites")

#读取一条数据：
mycursor.execute("SELECT * FROM sites")

myresult = mycursor.fetchone()

#读取指定数据
sql = "SELECT * FROM sites WHERE name ='RUNOOB'"
mycursor.execute(sql)
sql = "SELECT * FROM sites WHERE url LIKE '%oo%'" 
mycursor.execute(sql)

#为了防止数据库查询发生 SQL 注入的攻击，我们可以使用 %s 占位符来转义查询的条件：
sql = "SELECT * FROM sites WHERE name = %s"
na = ("RUNOOB", )
mycursor.execute(sql, na)
myresult = mycursor.fetchall()

#查询结果排序可以使用 ORDER BY 语句，默认的排序方式为升序，关键字为 ASC，如果要设置降序排序，可以设置关键字 DESC。
sql = "SELECT * FROM sites ORDER BY name"
mycursor.execute(sql)
#按 name 字段字母的降序排序：
sql = "SELECT * FROM sites ORDER BY name DESC"

#如果我们要设置查询的数据量，可以通过 "LIMIT" 语句来指定
mycursor.execute("SELECT * FROM sites LIMIT 3")
 
myresult = mycursor.fetchall()
 
for x in myresult:
  print(x)

#也可以指定起始位置，使用的关键字是 OFFSET：
mycursor.execute("SELECT * FROM sites LIMIT 3 OFFSET 1")  # 0 为 第一条，1 为第二条，以此类推
#sql = "DELETE FROM sites WHERE name = 'stackoverflow'"

#删除语句Delete from
import mysql.connector
 
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd="123456",
  database="runoob_db"
)
mycursor = mydb.cursor()
 
sql = "DELETE FROM sites WHERE name = 'stackoverflow'"
 
mycursor.execute(sql)
 
mydb.commit()
 
print(mycursor.rowcount, " 条记录删除")

注：为了防止数据库查询发生 SQL 注入的攻击，我们可以使用 %s 占位符来转义删除语句的条件：
sql = "DELETE FROM sites WHERE name = %s"
na = ("stackoverflow", )
 
mycursor.execute(sql, na)

#数据表更新，将 name 为 Zhihu 的字段数据改为 ZH：
sql = "UPDATE sites SET name = 'ZH' WHERE name = 'Zhihu'"
注意：UPDATE 语句要确保指定了 WHERE 条件语句，否则会导致整表数据被更新。
为了防止数据库查询发生 SQL 注入的攻击，我们可以使用 %s 占位符来转义更新语句的条件：
sql = "UPDATE sites SET name = %s WHERE name = %s"
val = ("Zhihu", "ZH")

#删除表使用 "DROP TABLE" 语句， IF EXISTS 关键字是用于判断表是否存在，只有在存在的情况才删除：
sql = "DROP TABLE IF EXISTS sites"  # 删除数据表 sites

**************Python3 MySQL 数据库连接 - PyMySQL 驱动********************************************************
1.安装PyMySQL
pip install PyMySQL




































	

